name: 'ECS Blue-Green Deployment'

description: 'Deploy and manage ECS services with Blue-Green deployment'

inputs:
  cluster-name:
    description: 'ECS Cluster name'
    required: true
  service-name:
    description: 'ECS Service name for the primary version'
    required: true
  backup-service-name:
    description: 'ECS Service name for the backup version'
    required: true
  task-definition:
    description: 'ECS Task Definition'
    required: true
  container-name:
    description: 'Name of the container in the task definition'
    required: true
  ecr-repository:
    description: 'ECR Repository name'
    required: true
  aws-region:  
    description: 'AWS region'
    required: true
  repo-uri:  
    description: 'ECR repository URI'
    required: true
  registry-type:
    description: 'Type of registry (public/private)'
    required: true
    default: 'private'
  image-tag:
    description: 'docker Image tag'
    required: true


runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Get ECR login
      run: |
        if [ "${{ inputs.registry-type }}" == "public" ]; then
          aws ecr-public get-login-password --region ${{ inputs.aws-region }} | docker login --username AWS --password-stdin ${{inputs.repo-uri}}
        else
          aws ecr get-login-password --region ${{ inputs.aws-region }} | docker login --username AWS --password-stdin ${{ inputs.repo-uri }}
        fi
        docker pull ${{ inputs.repo-uri }}:${{ inputs.image-tag }}
        NEW_ECR_IMAGE="${{ inputs.repo-uri }}:${{ inputs.image-tag }}"
        echo "Retrieved Image URI: $NEW_ECR_IMAGE"
      shell: bash

    - name: Update Task Definition Image
      run: |
        TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "service:158" --region "us-east-1")
        echo $TASK_DEFINITION | jq '.containerDefinitions[0].image="${NEW_ECR_IMAGE}"' > task-def.json
        echo "show task-def.json"
        cat task-def.json
      shell: bash

    - name: Register Task Definition 
      run: |
        aws ecs register-task-definition --family "${{ inputs.task-definition }}" --region "${{ inputs.aws-region }}" --cli-input-json file://task-def.json
      shell: bash

    - name: Deploy Primary Version
      run: |
        aws ecs update-service --cluster ${{ inputs.cluster-name }} --service ${{ inputs.service-name }} --task-definition "${{ inputs.task-definition }}:latest"
      shell: bash

    - name: Wait for Primary deployment to Stabilize
      run: |
        aws ecs wait services-stable --cluster ${{ inputs.cluster-name }} --services ${{ inputs.service-name }}
      shell: bash

    - name: Redirect Traffic to Backup Service
      run: |
        aws ecs update-service --cluster ${{ inputs.cluster-name }} --service ${{ inputs.service-name }} --desired-count 0
        aws ecs update-service --cluster ${{ inputs.cluster-name }} --service ${{ inputs.backup-service-name }} --desired-count 1
      shell: bash

    - name: Wait for Traffic Redirection to Stabilize
      run: |
        aws ecs wait services-stable --cluster ${{ inputs.cluster-name }} --services ${{ inputs.backup-service-name }}
      shell: bash

    - name: Cleanup Old Version
      run: |
        aws ecs update-service --cluster ${{ inputs.cluster-name }} --service ${{ inputs.service-name }} --desired-count 0
      shell: bash

    - name: Deploy New Version to the primary service
      run: |
        aws ecs update-service --cluster ${{ inputs.cluster-name }} --service ${{ inputs.service-name }} --task-definition "${{ inputs.task-definition }}:latest"
      shell: bash

    - name: Wait for New Deployment to Stabilize
      run: |
        aws ecs wait services-stable --cluster ${{ inputs.cluster-name }} --services ${{ inputs.service-name }}
      shell: bash

    - name: Redirect Traffic to Primary Service
      run: |
        aws ecs update-service --cluster ${{ inputs.cluster-name }} --service ${{ inputs.service-name }} --desired-count 1
        aws ecs update-service --cluster ${{ inputs.cluster-name }} --service ${{ inputs.backup-service-name }} --desired-count 0
      shell: bash

    - name: Wait for Traffic Redirection to Stabilize
      run: |
        aws ecs wait services-stable --cluster ${{ inputs.cluster-name }} --services ${{ inputs.service-name }}
      shell: bash

    - name: Cleanup Old Version
      run: |
        aws ecs update-service --cluster ${{ inputs.cluster-name }} --service ${{ inputs.backup-service-name }} --desired-count 0
      shell: bash
